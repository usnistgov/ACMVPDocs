{
    "SP-Template-Version": "5.8",
    "lastUpdated": "September-09-2024",
    "isPartOfEvidenceCatalogVersion": "1.0",
    "isPartOfEvidenceCatalogDate": "July-11-2023",
    "vendorName": "Amazon Web Services, Inc.",
	"moduleName": "AWS-LC Cryptographic Module",
	"version": "2.0",
	"docVersion": "1.0",
    "SecurityPolicyEvidence": {
        "Section-1-General": {
            "1.1-Overview": {
                "Overview-text": "This document is the non-proprietary FIPS 140-3 Security Policy for version AWS-LC FIPS 1.0.2 of the AWS-LC Cryptographic Module. It contains the security rules under which the module must operate and describes how this module meets the requirements as specified in FIPS PUB 140-3 (Federal Information Processing Standards Publication 140-3) for an overall Security Level 1 module."
            },
            "1.2-Security-Levels": {
                "securityLevelsList" : [
                    {
                        "section1-level":"1"
                    },
                    {
                        "section2-level":"1"
                    },
                    {
                        "section3-level":"1"
                    },
                    {
                        "section4-level":"1"
                    },
                    {
                        "section5-level":"1"
                    },
                    {
                        "section6-level":"1"
                    },
                    {
                        "section7-level":"N/A"
                    },
                    {
                        "section8-level":"N/A"
                    },
                    {
                        "section9-level":"1"
                    },
                    {
                        "section10-level":"1"
                    },
                    {
                        "section11-level":"1"
                    },
                    {
                        "section12-level":"1"
                    },
                    {
                        "overall-level":"1"
                    }
                ]
            },
            "1.3-Additional-Information-[O]": {
                "additionalInfo-text": "There is no additional information pertaining to this section."
            }
        },
        "Section-2-Cryptographic-Module-Specification": {
            "2.1-Description": {
                "purposeAndUse" :{
                    "PurposeAndUse-text": "The AWS-LC Cryptographic Module (hereafter referred to as “the module”) provides cryptographic services to applications running in the user space of the underlying operating system through a C language Application Program Interface (API)."
                },
                "moduleType": {
                    "$ref": "ModuleSpecification.json#\/path\/to\/module-type"
                },
                "moduleEmbodiment": {
                    "$ref": "ModuleSpecification.json#\/path\/to\/Module-embodiment"
                },
                "moduleCharacteristics-[O]": {
                    "$ref": "ModuleSpecification.json#\/path\/to\/SubChip"
                },
                "cryptographicBoundary": {
                    "cryptographicBoundary-text": "The associated block diagram shows the cryptographic boundary of the module, its interfaces with the operational environment and the flow of information between the module and operator (depicted through the arrows).The module components consist of the bcm.o file in executable form and fips_shared_support.c file that holds the pre-computed integrity check value. They are all version AWS-LC FIPS 1.0.2."
                },
                "TOEPP-[O]": {
                    "text": "",
                    "otherDiagrams-Photo-Text": "",
                    "Block-Diagram": {
                    "$ref": "cryptoBndry.png"
                    }
                }
            },
            "2.2-Tested-and-Vendor-Affirmed-Module-Version-and-Information": {

                "Tested-Module-Identification-Hardware": {
                    "testedHwList-[O]": [
                        {
                            "modelPartNumber-[U]": "",
                            "hardwareVersion": "",
                            "firmwareVersion": "",
                            "Processor": "",
                            "nonSecurityRelevantDistinguishingFeatures-[O]":""
                        }
                    ]
                },

                "Tested-Module-Identification-Software-Firmware-Hybrid": {
                    "testedSwFwHyList-[O]": [
                        {
                            "packageFileNames": "bcm.o (statically linked)",
                            "softwareFirmwareVersion": "Shared in libcrypto.so",
                            "nonSecurityRelevantDistinguishingFeatures-[O]": "",
                            "integrityTestImplemented": "HMAC SHA2-256"
                        },
                        {
                            "packageFileNames": "aws-lc-FIPS-1.0.2",
                            "softwareFirmwareVersion": "1.0.2",
                            "nonSecurityRelevantDistinguishingFeatures-[O]": "",
                            "integrityTestImplemented": "HMAC SHA2-256"
                        }
                    ]
                },
                "Tested-Module-Identification-Hybrid-Disjoint-Hardware": {
                    "testedHyHwList-[O]": [
                        {
                            "modelPartNumber": "",
                            "hardwareVersion": "",
                            "firmwareVersion": "",
                            "processors-[O]": "",
                            "nonSecurityRelevantDistinguishingFeatures-[O]": ""
                        }
                    ]
                },
                "Tested-Operational-Environments-Software-Firmware-Hybrid": {
                    "opEnvSwFwHyTestedList-[O]": [
                        {
                            "operatingSystem-guestOS": "Ubuntu 20.04",
                            "hardwarePlatform": "Amazon EC2 c5.metal with 192 GiB system memory and Elastic Block Store (EBS) 200 GiB",
                            "processors": "Intel ®Xeon ® Platinum 8276CL",
                            "PAA/PAI": "AES-NI and SHA extensions (PAA)",
                            "hypervisorAndHostOS-[O": "N/A",
                            "versions": ""
                        },
                        {
                            "operatingSystem": "Amazon Linux 2",
                            "hardwarePlatform": "Amazon EC2 c5.metal with 192 GiB system memory and Elastic Block Store (EBS) 200 GiB",
                            "processor": "Intel ®Xeon ® Platinum 8276CL",
                            "PAA/PAI": "AES-NI and SHA extensions (PAA)",
                            "hypervisorAndHostOS-[O": "N/A",
                            "versions": ""
                        },
                        {
                            "operatingSystem": "Ubuntu 20.04",
                            "hardwarePlatform": "Amazon EC2 c6g.metal with 128 GiB system memory and Elastic Block Store (EBS) 200 GiB",
                            "processor": "Graviton 2",
                            "PAA/PAI": "Neon and Crypto Extension (CE) (PAA)",
                            "hypervisorAndHostOS-[O": "N/A",
                            "versions": ""
                        },
                        {
                            "operatingSystem": "Amazon Linux 2",
                            "hardwarePlatform": "Amazon EC2 c6g.metal with 128 GiB system memory and Elastic Block Store (EBS) 200 GiB",
                            "processor": "Graviton 2",
                            "PAA/PAI": "Neon and Crypto Extension (CE) (PAA)",
                            "hypervisorAndHostOS-[O": "N/A",
                            "versions": ""
                        }
                    ]
                },
                "Vendor-Affirmed-Operational-Environmental-Software-Firmware-Hybrid": {
                    "opEnvSwFwHyVAList-[O]": [
                        {
                            "operatingSystem": "RHEL5",
                            "hardwarePlatform": "Amazon m4.4xlarge with Intel(R) Xeon(R) CPU E5-2686"
                        },
                        {
                            "operatingSystem": "Amazon Linux 2012",
                            "hardwarePlatform": "Amazon m4.4xlarge with Intel(R) Xeon(R) CPU E5-2686"
                        }
                    ]
                }
            },
            "2.3-Excluded-Components": {
                "ExclCompStatement-text": "There are no components excluded from the security requirements."
            },
            "2.4-Modes-Of-Operation": {
                "Modes-List-And-Description": {

                    "modeOfOpList": [
                        {
                            "name-[U]": "Approved Mode",
                            "description": "Automatically entered whenever an approved service is requested.",
                            "type": "Approved",
                            "statusIndicator-[O]": "Equivalent to the indicator of the requested service."
                        },
                        {
                            "name-[U]": "Non-approved Mode",
                            "description": "Automatically entered whenever a non-approved service is requested.",
                            "type": "Non-Approved",
                            "statusIndicator-[O]": "Equivalent to the indicator of the requested service."
                        }
                    ],
                    "modeOfOp-text": "The module automatically switches between the approved and non-approved modes contingent on the services requested by the operator. The status indicator of the mode of operation is equivalent to the indicator of the service that was requested.\nThe module does not implement a degraded mode of operation."
                },
                "Mode-Change-Instructions-and-Status-[O]": {
                    "modeChangeInstructionsAndStatus-text": ""
                },
                "Degraded-Mode-Description-[O]": {
                    "degradedMode-text": ""
                }
            },
            "2.5-Algorithms": {
                "Approved-Algorithms": {
                    "cavpCertSet.cavpOeAlgoList": [
                        {
                            "algorithmName": "AES-CBC",
                            "cavpCert": "A4510, A4513, A4515, A4519, A4523, A4527",
                            "algorithmProperties": "Direction - Decrypt, Encrypt\nKey Length - 128, 192, 256",
                            "reference": "SP 800-38A"
                        },
			            {
                            "algorithmName": "AES-CCM",
                            "cavpCert": "A4510, A4513, A4515, A4519, A4523, A4527",
                            "algorithmProperties": "Key Length - 128",
                            "reference": "SP 800-38C"
                        },
			            {
                            "algorithmName": "AES-CMAC",
                            "ccavpCert": "A4510, A4513, A4515, A4519, A4523, A4527",
                            "algorithmProperties": "Direction - Generation, Verification\nKey Length - 128, 256",
                            "reference": "SP 800-38B"
                        },
			            {
                            "algorithmName": "AES-CTR",
                            "cavpCert": "A4510, A4513, A4515, A4519, A4523, A4527",
                            "algorithmProperties": "Direction - Decrypt, Encrypt\nKey Length - 128, 192, 256",
                            "reference": "SP 800-38A"
                        },
			            {
                            "algorithmName": "AES-ECB",
                            "cavpCert": "A4510, A4511, A4512, A4513, A4514, A4515, A4516, A4519, A4520, A4521, A4522, A4523, A4524, A4525, A4526, A4527, A4528, A4529, A4530",
                            "algorithmProperties": "Direction - Decrypt, Encrypt\nKey Length - 128, 192, 256",
                            "reference": "SP 800-38A"
                        },
			            {
                            "algorithmName": "AES-GCM",
                            "cavpCert": "A4511, A4512, A4514, A4516, A4520, A4521, A4522, A4524, A4525, A4526, A4528, A4529, A4530",
                            "algorithmProperties": "Direction - Decrypt, Encrypt\nIV Generation - External, Internal\nIV Generation Mode - 8.2.1, 8.2.2\nKey Length - 128, 256",
                            "reference": "SP 800-38D"
                        },
			            {
                            "algorithmName": "AES-GMAC",
                            "cavpCert": "A4511, A4512, A4514, A4516, A4520, A4521, A4522, A4524, A4525, A4526, A4528, A4529, A4530",
                            "algorithmProperties": "Direction - Decrypt, Encrypt\nIV Generation - External, Internal\nIV Generation Mode - 8.2.1, 8.2.2\nKey Length - 128, 256",
                            "reference": "SP 800-38D"
                        },
			            {
                            "algorithmName": "AES-KW",
                            "cavpCert": "A4510, A4513, A4515, A4519, A4523, A4527",
                            "algorithmProperties": "Direction - Decrypt, Encrypt\nKey Length - 128, 192, 256",
                            "reference": "SP 800-38F"
                        },
			            {
                            "algorithmName": "AES-KWP",
                            "cavpCert": "A4510, A4513, A4515, A4519, A4523, A4527",
                            "algorithmProperties": "Direction - Decrypt, Encrypt\nKey Length - 128, 192, 256",
                            "reference": "SP 800-38F"
                        },
			            {
                            "algorithmName": "AES-XTS Testing Revision 2.0",
                            "cavpCert": "A4510, A4513, A4515, A4519, A4523, A4527",
                            "algorithmProperties": "Direction - Decrypt, Encrypt\nKey Length - 256",
                            "reference": "SP 800-38E"
                        },
			            {
                            "algorithmName": "Counter\nDRBG",
                            "cavpCert": "A4510, A4513, A4515, A4519, A4523, A4527",
                            "algorithmProperties": "Prediction Resistance - No\nMode - AES-256\nDerivation Function Enabled - No",
                            "reference": "SP 800-90A Rev. 1"
                        },
			            {
                            "algorithmName": "ECDSA KeyGen (FIPS186-5)",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Curve - P-224, P-256, P-384, P-521\nSecret Generation Mode - testing candidates",
                            "reference": "FIPS 186-5"
                        },
			            {
                            "algorithmName": "ECDSA KeyVer (FIPS186-5)",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Curve - P-224, P-256, P-384, P-521",
                            "reference": "FIPS 186-5"
                        },
			            {
                            "algorithmName": "ECDSA SigGen (FIPS186-5)",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Curve - P-224, P-256, P-384, P-521\nHash Algorithm - SHA2-224, SHA2-256, SHA2-384, SHA2-512\nComponent - No",
                            "reference": "FIPS 186-5"
                        },
			            {
                            "algorithmName": "ECDSA SigVer (FIPS186-4)",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Component - No\nCurve - P-224, P-256, P-384, P-521\nHash Algorithm - SHA-1",
                            "reference": "FIPS 186-4"
                        },
			            {
                            "algorithmName": "ECDSA SigVer (FIPS186-5)",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Curve - P-224, P-256, P-384, P-521\nHash Algorithm - SHA2-224, SHA2-256, SHA2-384, SHA2-512",
                            "reference": "FIPS 186-5"
                        },
			            {
                            "algorithmName": "HMAC-SHA-1",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Key Length - Key Length:112-524288 Increment 8",
                            "reference": "FIPS 198-1"
                        },
			            {
                            "algorithmName": "HMAC-SHA2-224",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Key Length - Key Length:112-524288 Increment 8",
                            "reference": "FIPS 198-1"
                        },
			            {
                            "algorithmName": "HMAC-SHA2-256",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Key Length - Key Length:112-524288 Increment 8",
                            "reference": "FIPS 198-1"
                        },
			            {
                            "algorithmName": "HMAC-SHA2-384",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Key Length - Key Length:112-524288 Increment 8",
                            "reference": "FIPS 198-1"
                        },
			            {
                            "algorithmName": "HMAC-SHA2-512",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Key Length - Key Length:112-524288 Increment 8",
                            "reference": "FIPS 198-1"
                        },
			            {
                            "algorithmName": "HMAC-SHA2-512/256",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Key Length - Key Length:112-524288 Increment 8",
                            "reference": "FIPS 198-1"
                        },
			            {
                            "algorithmName": "KAS-ECC-SSC Sp800-56Ar3",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Domain Parameter Generation Methods - P-224, P-256, P-384, P-521\nScheme - ephemeralUnified - KAS Role - initiator, responder",
                            "reference": "SP 800-56A Rev. 3"
                        },
			            {
                            "algorithmName": "KDA HKDF Sp800-56Cr1",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Derived Key Length - 2048\nShared Secret Length - Shared Secret Length: 224-2048 Increment 8\nHMAC Algorithm - SHA-1, SHA2-224, SHA2-256, SHA2-384, SHA2-512",
                            "reference": "SP 800-56C Rev. 2"
                        },
			            {
                            "algorithmName": "KDF SSH (CVL)",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Cipher - AES-128, AES-192, AES-256\nHash Algorithm - SHA-1, SHA2-224, SHA2-256, SHA2-384, SHA2-512",
                            "reference": "SP 800-135 Rev. 1"
                        },
			            {
                            "algorithmName": "KDF TLS (CVL)",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "TLS Version - v1.0/1.1, v1.2\nHash Algorithm - SHA2-256, SHA2-384, SHA2-512",
                            "reference": "SP 800-135 Rev. 1"
                        },
			            {
                            "algorithmName": "PBKDF",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Iteration Count - Iteration Count: 1000-10000 Increment 1\nPassword Length - Password Length: 14-128 Increment 1",
                            "reference": "SP 800-132"
                        },
			            {
                            "algorithmName": "RSA KeyGen (FIPS186-5)",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Key Generation Mode - probable\nModulo - 2048, 3072, 4096\nPrimality Tests - 2powSecStr\nPrivate Key Format - standard",
                            "reference": "FIPS 186-5"
                        },
			            {
                            "algorithmName": "RSA SigGen (FIPS186-5)",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Modulo - 2048, 3072, 4096\nSignature Type - pkcs1v1.5, pss",
                            "reference": "FIPS 186-5"
                        },
			            {
                            "algorithmName": "RSA SigVer (FIPS186-4)",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Signature Type - PKCS 1.5, PKCSPSS\nModulo - 1024, 2048, 3072, 4096",
                            "reference": "FIPS 186-4"
                        },
			            {
                            "algorithmName": "RSA SigVer (FIPS186-5)",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Modulo - 2048, 3072, 4096\nSignature Type - pkcs1v1.5, pss",
                            "reference": "FIPS 186-5"
                        },
			            {
                            "algorithmName": "SHA-1",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Message Length - Message Length: 0-65536 Increment 8\nLarge Message Sizes - 1, 2, 4, 8",
                            "reference": "FIPS 180-4"
                        },
			            {
                            "algorithmName": "SHA2-224",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Message Length - Message Length: 0-65536 Increment 8\nLarge Message Sizes - 1, 2, 4, 8",
                            "reference": "FIPS 180-4"
                        },
			            {
                            "algorithmName": "SHA2-256",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Message Length - Message Length: 0-65536 Increment 8\nLarge Message Sizes - 1, 2, 4, 8",
                            "reference": "FIPS 180-4"
                        },
			            {
                            "algorithmName": "SHA2-384",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Message Length - Message Length: 0-65536 Increment 8\nLarge Message Sizes - 1, 2, 4, 8",
                            "reference": "FIPS 180-4"
                        },
			            {
                            "algorithmName": "SHA2-512",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Message Length - Message Length: 0-65536 Increment 8\nLarge Message Sizes - 1, 2, 4, 8",
                            "reference": "FIPS 180-4"
                        },
			            {
                            "algorithmName": "SHA2-512/256",
                            "cavpCert": "A4509, A4517, A4518, A4531, A4532, A4533, A4534",
                            "algorithmProperties": "Message Length - Message Length: 0-65536 Increment 8\nLarge Message Sizes - 1, 2, 4, 8",
                            "reference": "FIPS 180-4"
                        }
                    ],
                    "approvedAlgorithms-text": ""
                },
                "Vendor-Affirmed-Algorithms": {
                    "vendorAffirmedAlgoList": [
                        {
                            "algorithmName": "Cryptographic Key Generation (CKG)",
                            "algorithmProperties": "RSA (FIPS 186-5):2048, 3072, 4096 bits with 112, 128, 149 bits of key strength.\nEC (FIPS 186-5):P-224, P-256, P 384, P-521 elliptic curves with 112-256 bits of key strength",
                            "implementation": "AWS-LC Cryptographic Module (static build) (SHA_ASM)",
                            "reference": "SP 800-133Rev2 section 5.1 and 5.2"
                        },
			            {
                            "algorithmName": "Cryptographic Key Generation (CKG)",
                            "algorithmProperties": "RSA (FIPS 186-5):2048, 3072, 4096 bits with 112, 128, 149 bits of key strength.\nEC (FIPS 186-5):P-224, P-256, P 384, P-521 elliptic curves with 112-256 bits of key strength",
                            "implementation": "AWS-LC Cryptographic Module (static build) (SHA_CE)",
                            "reference": "SP 800-133Rev2 section 5.1 and 5.2"
                        },
			            {
                            "algorithmName": "Cryptographic Key Generation (CKG)",
                            "algorithmProperties": "RSA (FIPS 186-5):2048, 3072, 4096 bits with 112, 128, 149 bits of key strength.\nEC (FIPS 186-5):P-224, P-256, P 384, P-521 elliptic curves with 112-256 bits of key strength",
                            "implementation": "AWS-LC Cryptographic Module (static build) (NEON)",
                            "reference": "SP 800-133Rev2 section 5.1 and 5.2"
                        },
			            {
                            "algorithmName": "Cryptographic Key Generation (CKG)",
                            "algorithmProperties": "RSA (FIPS 186-5):2048, 3072, 4096 bits with 112, 128, 149 bits of key strength.\nEC (FIPS 186-5):P-224, P-256, P 384, P-521 elliptic curves with 112-256 bits of key strength",
                            "implementation": "AWS-LC Cryptographic Module (static build) (SHA_SHANI)",
                            "reference": "SP 800-133Rev2 section 5.1 and 5.2"
                        },
			            {
                            "algorithmName": "Cryptographic Key Generation (CKG)",
                            "algorithmProperties": "RSA (FIPS 186-5):2048, 3072, 4096 bits with 112, 128, 149 bits of key strength.\nEC (FIPS 186-5):P-224, P-256, P 384, P-521 elliptic curves with 112-256 bits of key strength",
                            "implementation": "AWS-LC Cryptographic Module (static build) (SHA_AVX2)",
                            "reference": "SP 800-133Rev2 section 5.1 and 5.2"
                        },
			            {
                            "algorithmName": "Cryptographic Key Generation (CKG)",
                            "algorithmProperties": "RSA (FIPS 186-5):2048, 3072, 4096 bits with 112, 128, 149 bits of key strength.\nEC (FIPS 186-5):P-224, P-256, P 384, P-521 elliptic curves with 112-256 bits of key strength",
                            "implementation": "AWS-LC Cryptographic Module (static build) (SHA_AVX)",
                            "reference": "SP 800-133Rev2 section 5.1 and 5.2"
                        },
			            {
                            "algorithmName": "Cryptographic Key Generation (CKG)",
                            "algorithmProperties": "RSA (FIPS 186-5):2048, 3072, 4096 bits with 112, 128, 149 bits of key strength.\nEC (FIPS 186-5):P-224, P-256, P 384, P-521 elliptic curves with 112-256 bits of key strength",
                            "implementation": "AWS-LC Cryptographic Module (static build) (SHA_SSSE3)",
                            "reference": "SP 800-133Rev2 section 5.1 and 5.2"
                        }
                    ],
                    "vendorAffirmedAlgo-text": ""
                },
                "NonApproved-Allowed-Algorithms": {
                    "nonApprovedAllowedAlgoList": [
                        {
                            "algorithmName": "",
                            "algorithmProperties": "",
                            "implementation": "",
                            "reference": ""
                        }
                    ],
                    "nonApprovedAllowedAlgo-text": ""
                },
                "NonApproved-Allowed-Algorithms-with-No-Security-Claimed": {
                    "nonApprovedAllowedAlgoNSCList": [
                        {
                            "algorithm": "MD5",
                            "caveat": "Allowed per IG 2.4.A",
                            "use\/Function": "Message Digest used in TLD 1.0/1.1 KDF only"
                        }
                    ],
                    "nonApprovedAllowedAlgoNSC-text": ""
                },
                "NonApproved-Not-Allowed-Algorithms": {
                    "nonApprovedNotAllowedAlgoList": [
                        {
                            "algorithm": "AES with OFB or CFB1, CFB8 modes",
                            "use\/Function": "Encryption, Decryption"
                        },
			            {
                            "algorithm": "AES GCM, GCM, GMAC, XTS with keys not listed in Table 5",
                            "use\/Function": "Encryption, Decryption"
                        },
			            {
                            "algorithm": "AES using aes_*_generic function",
                            "use\/Function": "Encryption, Decryption"
                        },
			            {
                            "algorithm": "AES GMAC using aes_*_generic",
                            "use\/Function": "Message Authentication Generation"
                        },
			            {
                            "algorithm": "Curve secp256k1",
                            "use\/Function": "Signature Generation, Signature Verification, Shared Secret Computation"
                        },
			            {
                            "algorithm": "Diffie Hellman",
                            "use\/Function": "Shared Secret Computation"
                        },
			            {
                            "algorithm": "HMAC-MD4, HMAC-MD5, HMAC-SHA1, HMAC-SHA-3, HMAC-RIPEMD-160",
                            "use\/Function": "Message Authentication Generation"
                        },
			            {
                            "algorithm": "MD4",
                            "use\/Function": "Message Digest"
                        },
			            {
                            "algorithm": "MD5 (outside of TLS)",
                            "use\/Function": "Message Digest"
                        },
			            {
                            "algorithm": "RSA using RSA_generate_key_ex",
                            "use\/Function": "Key Generation"
                        },
			            {
                            "algorithm": "ECDSA using EC_KEY_generate_key",
                            "use\/Function": "Key Generation"
                        },
			            {
                            "algorithm": "RSA using keys less than 2048 bits",
                            "use\/Function": "Signature Generation"
                        },
			            {
                            "algorithm": "RSA using keys less than 1024 bits",
                            "use\/Function": "Signature Verification"
                        },
			            {
                            "algorithm": "RSA without hashing",
                            "use\/Function": "Sign/Verify primitive operations"
                        },
			            {
                            "algorithm": "RSA encryption primitive with PKCS#1 v1.5 and OAEP padding",
                            "use\/Function": "Encryption"
                        },
			            {
                            "algorithm": "SHA-1, SHA-3",
                            "use\/Function": "Signature Generation"
                        },
			            {
                            "algorithm": "SHAKE, RIPEMD-160, SHA-3",
                            "use\/Function": "Message Digest"
                        },
			            {
                            "algorithm": "TLS KDF using any SHA algorithms other than SHA2-256, SHA2-384, SHA2-512; or TLS KDF using non-extended master secret",
                            "use\/Function": "Key Derivation"
                        },
			            {
                            "algorithm": "RSA",
                            "use\/Function": "Key Encapsulation/Un-encapsulation"
                        }
                    ],
                    "nonApprovedNotAllowedAlgo-text": "Non-approved Algorithms table lists non-approved algorithms that are not allowed in the approved mode of operation. These algorithms are used by the non-approved services listed in the Non-approved Services table."
                }
            },
            "2.6-Security-Function-Implementations": {
                "secFunImplList": [
                    {
                        "name-[U]": "Shared Secret Computation with EC Diffie-Hellman",
                        "type": "KAS-SSC",
                        "description": "Shared secret computation per SP 800-56ARev3",
                        "sfProperties-[O]": "Curves:P-224, P-256, P-384, P-521 elliptic curves with 112-256 bits of key strength\nCompliance:Compliant with IG D.F scenario 2(1)",
                        "algorithms[M]": "KAS-ECC-SSC Sp800-56Ar3"
                    },
                    {
                        "name-[U]": "Key Wrapping/Unwrapping with AES KW, AES-KWP",
                        "type": "KTS-Wrap",
                        "description": "Key wrapping, key unwrapping using AES KW/KWP",
                        "sfProperties-[O]": "Keys:128, 192, 256 bits with 128-256 bits of key strength\nCompliance:Compliant with IG D.G",
                        "algorithms[M]": "AES-KW\nAES-KWP"
                    },
                    {
                        "name-[U]": "Key Wrapping/Unwrapping with AES GCM",
                        "type": "KTS-Wrap",
                        "description": "Key wrapping, key unwrapping using AES GCM",
                        "sfProperties-[O]": "Keys:128 and 256 bits with  128 and 256 bits of key strength\n Compliance: Compliant with IG D.G",
                        "algorithms[M]": "AES-GCM"
                    },
                    {
                        "name-[U]": "Key Wrapping/Unwrapping with AES CCM",
                        "type": "KTS-Wrap",
                        "description": "Key wrapping, key unwrapping using AES CCM",
                        "sfProperties-[O]": "Keys:128 bits with 128 bits of key strength\nCompliance:Compliant with IG D.G",
                        "algorithms[M]": "AES-CCM"
                    },
                    {
                        "name-[U]": "Encryption/Decryption with AES",
                        "type": "BC-UnAuth",
                        "description": "Encryption, decryption using AES",
                        "sfProperties-[O]": "Keys:128, 192, 256 bits keys with 128-256 of key strength",
                        "algorithms[M]": "AES-CBC\nAES-CTR\nAES-ECB\nAES-XTS Testing Revision 2.0"
                    },
                    {
                        "name-[U]": "Signature Generation with RSA",
                        "type": "DigSig-SigGen",
                        "description": "Digital signature generation using RSA",
                        "sfProperties-[O]": "Keys:2048, 3072, 4096 bits with 112-150 bits of strength",
                        "algorithms[M]": "RSA SigGen (FIPS186-5)"
                    },
                    {
                        "name-[U]": "Signature Generation with ECDSA",
                        "type": "DigSig-SigGen",
                        "description": "Digital signature generation using ECDSA",
                        "sfProperties-[O]": "Curves:P-224, P-256, P-384, P-521 with 112-256 bits of key strength",
                        "algorithms[M]": "ECDSA SigGen (FIPS186-5)"
                    },
                    {
                        "name-[U]": "Key Generation with RSA",
                        "type": "AsymKeyPair-KeyGen",
                        "description": "Key generation using RSA",
                        "sfProperties-[O]": "Keys:2048, 3072, 4096 bits key with 112-150 bits of strength",
                        "algorithms[M]": "RSA KeyGen (FIPS186-5)"
                    },
                    {
                        "name-[U]": "Key Generation with ECDSA",
                        "type": "AsymKeyPair-KeyGen",
                        "description": "Key generation using ECDSA",
                        "sfProperties-[O]": "Curves:P-224, P-256, P-384, P-521 with 112-256 bits of strength",
                        "algorithms[M]": "ECDSA KeyGen (FIPS186-5)"
                    },
                    {
                        "name-[U]": "Signature Verification with ECDSA",
                        "type": "DigSig-SigVer",
                        "description": "Signature verification using ECDSA",
                        "sfProperties-[O]": "Curves:P-224, P-256, P-384, P-521 with 112-256 bits of strength",
                        "algorithms[M]": "ECDSA SigVer (FIPS186-4)\nECDSA SigVer (FIPS186-5)"
                    },
                    {
                        "name-[U]": "Signature Verification with RSA",
                        "type": "DigSig-SigVer",
                        "description": "Signature verification using RSA",
                        "sfProperties-[O]": "Keys:1024, 2048, 3072, 4096 bits with 80-150 bits of strength",
                        "algorithms[M]": "RSA SigVer (FIPS186-4)\nRSA SigVer (FIPS186-5)"
                    },
                    {
                        "name-[U]": "Key Verification with ECDSA",
                        "type": "AsymKeyPair-KeyVer",
                        "description": "Key  verification using ECDSA",
                        "sfProperties-[O]": "Curves:P-224, P-256, P-384, P-521 with 112-256 bits of strength",
                        "algorithms[M]": "ECDSA KeyVer (FIPS186-5)"
                    },
                    {
                        "name-[U]": "Key Derivation with TLS KDF",
                        "type": "KAS-135KDF",
                        "description": "Key derivation using TLS KDF",
                        "sfProperties-[O]": "Derived keys:112 to 256 bits",
                        "algorithms[M]": "KDF TLS"
                    },
                    {
                        "name-[U]": "Key Derivation with SSH KDF",
                        "type": "KAS-135KDF",
                        "description": "Key derivation using SSH KDF",
                        "sfProperties-[O]": "SSH Derived keys:112 to 256 bits",
                        "algorithms[M]": "KDF SSH"
                    },
                    {
                        "name-[U]": "Key Derivation with KDA HKDF",
                        "type": "KAS-56CKDF",
                        "description": "Key derivation using KDA HKDF",
                        "sfProperties-[O]": "Derived keys:112 to 256 bits",
                        "algorithms[M]": "KDA HKDF Sp800-56Cr1"
                    },
                    {
                        "name-[U]": "Key Derivation with PBKDF",
                        "type": "PBKDF",
                        "description": "Key derivation using PBKDF",
                        "sfProperties-[O]": "Derived keys:112 to 256 bits",
                        "algorithms[M]": "PBKDF"
                    },
                    {
                        "name-[U]": "Message Digest with SHA",
                        "type": "SHA",
                        "description": "Message digest using SHA",
                        "sfProperties-[O]": "",
                        "algorithms[M]": "SHA-1\nSHA2-224\nSHA2-256\nSHA2-384\nSHA2-512\nSHA2-512/256"
                    },
                    {
                        "name-[U]": "Random Number Generation with DRBG",
                        "type": "DRBG",
                        "description": "Random number generation using DRBG",
                        "sfProperties-[O]": "Compliance:Compliant with SP800-90ARev1",
                        "algorithms[M]": "Counter DRBG"
                    },
                    {
                        "name-[U]": "Message Authentication Generation with HMAC",
                        "type": "MAC",
                        "description": "Message authentication generation using HMAC",
                        "sfProperties-[O]": "SHA algorithm:SHA-1, SHA2-224, SHA2-256, SHA2-384, SHA2-512, SHA2-512/256",
                        "algorithms[M]": "HMAC-SHA-1\nHMAC-SHA2-224\nHMAC-SHA2-256\nHMAC-SHA2-384\nHMAC-SHA2-512\nHMAC-SHA2-512/256"
                    },
                    {
                        "name-[U]": "Message Authentication Generation with AES",
                        "type": "MAC",
                        "description": "Message authentication generation using AES CMAC/GMAC",
                        "sfProperties-[O]": "Keys:128 or 256 bits with 128 or 256 bits of strength",
                        "algorithms[M]": "AES-CMAC"
                    },
                    {
                        "name-[U]": "Authenticated Encryption/Decryption with AES CCM",
                        "type": "BC-Auth",
                        "description": "Authenticated encryption and decryption using AES CCM",
                        "sfProperties-[O]": "Keys:128 bits with 128 bits of strength",
                        "algorithms[M]": "AES-CCM"
                    },
                    {
                        "name-[U]": "Authenticated Encryption/Decryption with AES GCM",
                        "type": "BC-Auth",
                        "description": "Authenticated encryption and decryption using AES GCM",
                        "sfProperties-[O]": "Keys:128 or 256 bits with 128 or 256 bits of strength\nAuthenticated Encryption:Internal IV Mode 8.2.2\nAuthenticated Decryption:External IV",
                        "algorithms[M]": "AES-GCM"
                    }
                ],
                "sfiDescription-text": ""
            },
            "2.7-Algorithm-Specific-Information": {
                "AlgSpecificInfo-text": ""
            },
            "2.8-RBG-and-Entropy": {
                "entropyCertNumList-[O]": [
                    {
                        "vendorName": "",
                        "entropyCert": ""
                    }
                ],
                "entropySourceList-[O]": [
                    {
                        "name-[U]": "SP800-90B compliant ENT (NP)",
                        "type": "Non-physical",
                        "operationalEnvironment": "Ubuntu 20.04, Amazon Linux 2",
                        "sampleSize": "256 bits",
                        "entropyPerSample": "256 bits",
                        "conditioningComponents": "SHA3-256 as the vetted conditioning component is located within the physical perimeter of the operational environment but outside the software module cryptographic boundary."
                    }
                ],
                "RBGandEntropy-text": "The entropy source is located within the physical perimeter, but outside of the cryptographic boundary of the module."
            },
            "2.9-Key-Generation": {
                "keyGen-text": "For generating RSA, ECDSA and EC Diffie-Hellman keys, the module implements asymmetric key generation services compliant with FIPS186-4 and using a DRBG compliant with SP800-90Arev1. The random value used in asymmetric key generation is obtained from the DRBG. In accordance with FIPS 140-3 IG D.H, the cryptographic module performs Cryptographic Key Generation (CKG) for asymmetric keys as per section 5.1 of SP800-133rev2 (vendor affirmed) by obtaining a random bit string directly from an approved DRBG and that can support the required security strength requested by the caller (without any V, as described in Additional Comments 2 of IG D.H). The module does not provide a dedicated service for generating symmetric key. However, symmetric keys can be derived using SP800-135rev1 for TLS KDF algorithm. This generation method maps to section 6.2 of SP800-133rev2."
            },
            "2.10-Key-Establishment": {
                "keyEst-text": "The module provides SP800-38F approved key transport methods according to IG D.G. The key transport method is provided using an AES-KW or AES-KWP key wrapping algorithm. According to “Table 2: Comparable strengths” in SP800-57, the key sizes of AES and EC Diffie-Hellman provide the following security strengths: EC Diffie-Hellman shared secret computation provides between 112 and 256 bits of encryption strength, AES key wrapping provides between 128 and 256 bits of encryption strength. Additionally, the module also supports key derivation using TLS 1.2 KDF compliant to SP800-135rev1."
            },
            "2.11-Industry-Protocols": {
                "industryProtocols-text": "The module offers three AES GCM implementations. The GCM IV generation for these implementations complies respectively with IG C.H under Scenario 1, Scenario 2, and Scenario 5. The GCM shall only be used in the context of the AES-GCM encryption executing under each scenario, and using the referenced APIs explained next. For TLS 1.2, the module offers the GCM implementation via the functions EVP_aead_aes_128_gcm_tls12() and EVP_aead_aes_256_gcm_tls12(), and uses the context of Scenario 1 of IG C.H. The module is compliant with SP800-52rev2 and the mechanism for IV generation is compliant with RFC5288. The module supports acceptable AES-GCM ciphersuites from Section 3.3.1 of SP800-52rev2. The module explicitly ensures that the counter (the nonce_explicit part of the IV) does not exhaust the maximum number of possible values of 264-1 for a given session key. If this exhaustion condition is observed, the module returns an error indication to the calling application, which will then need to either abort the connection, or trigger a handshake to establish a new encryption key. In the event the module’s power is lost and restored, the consuming application must ensure that a new key for use with the AES-GCM key encryption or decryption under this scenario shall be established. In this implementation, the module offers the interfaces EVP_aead_aes_128_gcm_randnonce() and EVP_aead_aes_256_gcm_randnonce() for compliance with Scenario 2 of IG C.H and SP800-38D Section 8.2.2. The AES-GCM IV is generated randomly internal to the module using module’s approved DRGB. The DRBG seeds itself from the entropy source. The GCM IV is 96 bits in length. Per Section 9, this 96-bit IV contains 96 bits of entropy. For TLS 1.3, the module offers the AES-GCM implementation via the functions EVP_aead_aes_128_gcm_tls13() and EVP_aead_aes_256_gcm_tls13(), and uses the context of Scenario 5 of IG C.H. The protocol that provides this compliance is TLS 1.3, defined in RFC8446 of August 2018, using the ciphersuites that explicitly select AES-GCM as the encryption/decryption cipher (Appendix B.4 of RFC8446). The module supports acceptable AES-GCM ciphersuites from Section 3.3.1 of SP800-52rev2. The module implements, within its boundary, an IV generation unit for TLS 1.3 that keeps control of the 64-bit counter value within the AES-GCM IV. If the exhaustion condition is observed, the module will return an error indication to the calling application, who will then need to either trigger a re-key of the session (i.e., a new key for AES-GCM), or terminate the connection. In the event the module’s power is lost and restored, the consuming application must ensure that new AES-GCM keys encryption or decryption under this scenario are established. TLS 1.3 provides session resumption, but the resumption procedure derives new AES-GCM encryption keys."
            },
            "2.12-Additional-Information-[O]": {
                "additionalInfo-text": "There is no additional information pertaining to this section."
            }
        },
        "Section-3-Cryptographic-Module-Interfaces": {
            "3.1-Ports-And-Interfaces": {
                "portInterfaceList": [
                    {
                        "physicalPort": "As a software-only module, the module does not have physical ports. Physical ports are interpreted to be the physical ports of the hardware platforms on which it runs.",
                        "logicalInterface": "Data Input",
                        "dataThatPasses": "API input parameters for data."
                    },
                    {
                        "physicalPort": "As a software-only module, the module does not have physical ports. Physical ports are interpreted to be the physical ports of the hardware platforms on which it runs.",
                        "logicalInterface": "Data Output",
                        "dataThatPasses": "API output parameters for data."
                    },
                    {
                        "physicalPort": "As a software-only module, the module does not have physical ports. Physical ports are interpreted to be the physical ports of the hardware platforms on which it runs.",
                        "logicalInterface": "Control Output",
                        "dataThatPasses": "API function calls."
                    },
                    {
                        "physicalPort": "As a software-only module, the module does not have physical ports. Physical ports are interpreted to be the physical ports of the hardware platforms on which it runs.",
                        "logicalInterface": "Status Output",
                        "dataThatPasses": "API return codes, error message."
                    }
                ],
                "portsAndInterfaces-text": "As a Software module, the module interfaces are defined as Software or Firmware Module Interfaces (SMFI), and there are no physical ports. The interfaces are mapped to the API provided by the module, through which the operator can interact. The interfaces are listed in the Ports and Interfaces table. All data output via data output interface is inhibited when the module is performing pre-operational test or zeroization or when the module enters error state."
            },
            "3.2-Trusted-Channel-Specification-[O]": {
                "trustedChannel-text": "There is no trusted channel implemented within the module."
            },
            "3.3-Control-Interface-Not-Inhibited-[O]": {
                "controlInterface-text": "The module does not implement a control output interface."
            },
            "3.4-Additional-Information-[O]": {
                "additionalInfo-text": "There is no additional information pertaining to this section."
            }
        },
        "Section-4-Roles-Services-Authentication": {
            "4.1-Authentication-Methods": {
                "authMethodList-[O]": [
                    {
                        "name-[U]": "",
                        "description": "",
                        "mechanism": "",
                        "strengthEachAttempt": "",
                        "strengthPerMinute-[O]": ""
                    }
                ],
                "authenticationMethods-text": "The module does not support authentication."
            },
            "4.2-Roles": {
                "roleList": [
                    {
                        "name-[U]": "Crypto Officer",
                        "type": "Role",
                        "operatorType": "CO",
                        "authenticationMethods-[M]": "N/A"
                    }
                ],
                "roles-text": "The module supports the Crypto Office role only. This sole role is implicitly assumed by the operator of the module when performing a service. The Roles table lists the various roles supported by the module with corresponding services with input and output."
            },
            "4.3-Approved-Services": {
                "approvedServiceList": [
                    {
                        "name-[U]": "Encryption",
                        "description": "Encryption",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "Plaintext, key",
                        "outputs": "Ciphertext",
                        "sfi-[M]": "Encryption/Decryption with AES",
                        "rolesSSPAccess-[M]": "Crypto Officer\n- AES Key: W, E"
                    },
                    {
                        "name-[U]": "Decryption",
                        "description": "Decryption",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "Ciphertext, key",
                        "outputs": "Plaintext",
                        "sfi-[M]": "Encryption/Decryption with AES",
                        "rolesSSPAccess-[M]": "Crypto Officer\n- AES Key: W, E"
                    },
                    {
                        "name-[U]": "Authenticated Encryption",
                        "description": "Authenticated Encryption",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "Plaintext, key",
                        "outputs": "Ciphertext, authenticated tag",
                        "sfi-[M]": "Authenticated Encryption/Decryption with AES CCM\nAuthenticated Encryption/Decryption with AES GCM",
                        "rolesSSPAccess-[M]": "Crypto Officer\n- AES Key: W, E"
                    },
                    {
                        "name-[U]": "Authenticated Decryption",
                        "description": "Authenticated Decryption",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "Ciphertext, authentication tag, key",
                        "outputs": "Plaintext",
                        "sfi-[M]": "Authenticated Encryption/Decryption with AES CCM\nAuthenticated Encryption/Decryption with AES GCM",
                        "rolesSSPAccess-[M]": "Crypto Officer\n- AES Key: W, E"
                    },
                    {
                        "name-[U]": "Key wrapping",
                        "description": "Encrypting a key",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "Key wrapping key, key to be wrapped",
                        "outputs": "Wrapped key",
                        "sfi-[M]": "Key Wrapping/Unwrapping with AES KW, AES-KWP\nKey Wrapping/Unwrapping with AES GCM\nKey Wrapping/Unwrapping with AES CCM",
                        "rolesSSPAccess-[M]": "Crypto Officer\n- AES Key: W, E"
                    },
                    {
                        "name-[U]": "Key Unwrapping",
                        "description": "Decrypting a key",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "Key wrapping key, key to be unwrapped",
                        "outputs": "Unwrapped key",
                        "sfi-[M]": "Key Wrapping/Unwrapping with AES KW, AES-KWP\nKey Wrapping/Unwrapping with AES GCM\nKey Wrapping/Unwrapping with AES CCM",
                        "rolesSSPAccess-[M]": "Crypto Officer\n- AES Key: W, E"
                    },
                    {
                        "name-[U]": "Message Authentication Generation",
                        "description": "MAC computation",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "Message, HMAC key, AES key",
                        "outputs": "Message authentication code",
                        "sfi-[M]": "Message Authentication Generation with HMAC\nMessage Authentication Generation with AES",
                        "rolesSSPAccess-[M]": "Crypto Officer\n- AES Key: W, E\n- HMAC Key: W,E"
                    },
                    {
                        "name-[U]": "Message Digest",
                        "description": "Generating message digest",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "Message",
                        "outputs": "Digest of the message",
                        "sfi-[M]": "Message Digest with SHA",
                        "rolesSSPAccess-[M]": "Crypto Officer"
                    },
                    {
                        "name-[U]": "Random Number Generation",
                        "description": "Generating random numbers",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "Number of bits",
                        "outputs": "Random numbers",
                        "sfi-[M]": "Random Number Generation with DRBG",
                        "rolesSSPAccess-[M]": "Crypto Officer\n- Entropy Input: W,E\n- DRBG Seed: G,E\n- DRBG Internal State (V, Key): G,W,E"
                    },
                    {
                        "name-[U]": "Key Generation",
                        "description": "Generating key pair",
                        "indicator": "Return value from the function FIPS_service_indicator_check_approved()",
                        "inputs": "Key size",
                        "outputs": "Key pair",
                        "sfi-[M]": "Key Generation with RSA\nKey Generation with ECDSA",
                        "rolesSSPAccess-[M]": "Crypto Officer\n- RSA Public Key : G,R\n- RSA Private Key: G,R\n- EC Public Key: G,R\n- EC Private Key: G,R"
                    },
                    {
                        "name-[U]": "Key Verification",
                        "description": "Verifying the public key",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "Key to verify",
                        "outputs": "Return codes and/or log messages",
                        "sfi-[M]": "Key Verification with ECDSA",
                        "rolesSSPAccess-[M]": "Crypto Officer\n- EC Public Key: W,E"
                    },
                    {
                        "name-[U]": "Signature Generation",
                        "description": "Generating signature",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "Message, hash algorithm, private key",
                        "outputs": "Signature",
                        "sfi-[M]": "Signature Generation with RSA\nSignature Generation with ECDSA",
                        "rolesSSPAccess-[M]": "Crypto Officer\n- RSA Private Key: W,E\n- EC Private Key: W,E"
                    },
                    {
                        "name-[U]": "Signature Verification",
                        "description": "Verifying signature",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "Signature, hash algorithm, public key",
                        "outputs": "Verification result",
                        "sfi-[M]": "Signature Verification with ECDSA\nSignature Verification with RSA",
                        "rolesSSPAccess-[M]": "Crypto Officer\n- RSA Public Key : W,E\n- EC Public Key: W,E"
                    },
                    {
                        "name-[U]": "Shared Secret Computation",
                        "description": "Calculating shared secret",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "Private key, public key from peer",
                        "outputs": "Shared secret",
                        "sfi-[M]": "Shared Secret Computation with EC Diffie-Hellman",
                        "rolesSSPAccess-[M]": "Crypto Officer\n- EC Public Key: W,E\n- EC Private Key: W,E\n- Shared Secret: G,R"
                    },
                    {
                        "name-[U]": "Key Derivation with TLS KDF",
                        "description": "Deriving Keys",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "TLS Pre-Master Secret / TLS Master Secret",
                        "outputs": "TLS Master secret / TLS Derived Key (AES/HMAC)",
                        "sfi-[M]": "Key Derivation with TLS KDF",
                        "rolesSSPAccess-[M]": "Crypto Officer\n- TLS Pre-Master Secret: W,E\n- TLS Master Secret : G,W,E\n- TLS Derived Key (AES/HMAC): G"
                    },
                    {
                        "name-[U]": "Key Derivation with PBKDF",
                        "description": "Deriving Keys",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "Password, salt, iteration count",
                        "outputs": "PBKDF Derived Key",
                        "sfi-[M]": "Key Derivation with PBKDF",
                        "rolesSSPAccess-[M]": "Crypto Officer\n- PBKDF Derived Key: G,R\n- Password: W,E"
                    },
                    {
                        "name-[U]": "Key Derivation with KDA HKDF",
                        "description": "Deriving keys",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "Shared Secret, Key Length, Digest",
                        "outputs": "KDA Derived Key",
                        "sfi-[M]": "Key Derivation with KDA HKDF",
                        "rolesSSPAccess-[M]": "Crypto Officer\n- KDA Derived Key: G,R\n- Shared Secret: W,E"
                    },
                    {
                        "name-[U]": "Key Derivation with SSH KDF",
                        "description": "Deriving Keys",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "Shared Secret, Key Length",
                        "outputs": "SSH Derived Key",
                        "sfi-[M]": "Key Derivation with SSH KDF",
                        "rolesSSPAccess-[M]": "Crypto Officer\n- SSH Derived Key: G,R\n- Shared Secret: W,E"
                    },
                    {
                        "name-[U]": "Zeroization",
                        "description": "Zeroize SSP in volatile memory",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "Context containing SSPs",
                        "outputs": "None",
                        "sfi-[M]": "None",
                        "rolesSSPAccess-[M]": "Crypto Officer\n- AES Key: Z\n- HMAC Key: Z\n- Entropy Input: Z\n- DRBG Seed: Z\n- DRBG Internal State (V, Key): Z\n- RSA Public Key : Z\n- RSA Private Key: Z\n- RSA Private Key: Z\n- EC Public Key: Z\n- EC Private Key: Z\n- Shared Secret: Z\n- TLS Pre-Master Secret: Z\n- TLS Master Secret : Z\n- TLS Derived Key (AES/HMAC): Z\n- TLS Derived Key (AES/HMAC): Z\n- Password: Z\n- Intermediate Key Generation Value: Z"
                    },
                    {
                        "name-[U]": "On-Demand Self-test",
                        "description": "Initiate power-on self-tests by reset",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "None",
                        "outputs": "Result of test (pass/fail)",
                        "sfi-[M]": "Shared Secret Computation with EC Diffie-Hellman\nKey Wrapping/Unwrapping with AES KW, AES-KWP\nKey Wrapping/Unwrapping with AES GCM\nKey Wrapping/Unwrapping with AES CCM\nEncryption/Decryption with AES\nSignature Generation with RSA\nSignature Generation with ECDSA\nKey Generation with RSA\nKey Generation with ECDSA\nKey Generation with RSA\nSignature Verification with ECDSA\nSignature Verification with RSA\nKey Verification with ECDSA\nKey Derivation with TLS KDF\nKey Derivation with SSH KDF\nKey Derivation with KDA HKDF\nKey Derivation with PBKDF\nMessage Digest with SHA\nRandom Number Generation with DRBG\nMessage Authentication Generation with HMAC\nMessage Authentication Generation with AES\nAuthenticated Encryption/Decryption with AES CCM\nAuthenticated Encryption/Decryption with AES GCM",
                        "rolesSSPAccess-[M]": "Crypto Officer"
                    },
                    {
                        "name-[U]": "On-Demand Integrity Test",
                        "description": "Initiate integrity test on-demand",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "None",
                        "outputs": "Result of test (pass/fail)",
                        "sfi-[M]": "Message Authentication Generation with HMAC",
                        "rolesSSPAccess-[M]": "Crypto Officer"
                    },
                    {
                        "name-[U]": "Show Status",
                        "description": "Show status of the module state",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "None",
                        "outputs": "Return codes and/or log messages",
                        "sfi-[M]": "N/A",
                        "rolesSSPAccess-[M]": "Crypto Officer"
                    },
                    {
                        "name-[U]": "Show Version",
                        "description": "Show the version of the module using awslc_version_string",
                        "indicator": "Return value 1 from the function FIPS_service_indicator_check_approved()",
                        "inputs": "None",
                        "outputs": "Name and version information",
                        "sfi-[M]": "N/A",
                        "rolesSSPAccess-[M]": "Crypto Officer"
                    }
                ],
                "approvedServices-text": "The Approved Services Table lists the approved services that utilize approved and allowed security functions. The module provides services to operators who assume the available role. All services are described in detail in the developer documentation. The next subsections define the services that utilize approved and allowed security functions, and the services that utilize non-approved security functions in this module. For the respective tables, the convention applies when specifying the access permissions (types) that the service has for each SSP. G = Generate: The module generates or derives the SSP. R = Read: The SSP is read from the module (e.g., the SSP is output). W = Write: The SSP is updated, imported, or written to the module. E = Execute: The module uses the SSP in performing a cryptographic operation. Z = Zeroize: The module zeroizes the SSP. For the role, CO indicates 'Crypto Officer'"
            },
            "4.4-Nonapproved-Services": {
                "nonApprovedServiceList-[O]": [
                    {
                        "name-[U]": "Encryption",
                        "description": "Encryption",
                        "algorithmsAccessed": "AES with OFB or CFB1, CFB8 modes\nAES GCM, GCM, GMAC, XTS with keys not listed in Table 5\nAES using aes_*_generic function\nAES GMAC using aes_*_generic\nRSA encryption primitive with PKCS#1 v1.5 and OAEP padding",
                        "role": "CO"
                    },
                    {
                        "name-[U]": "Decryption",
                        "description": "Decryption",
                        "algorithmsAccessed": "AES with OFB or CFB1, CFB8 modes\nAES GCM, GCM, GMAC, XTS with keys not listed in Table 5\nAES using aes_*_generic function\nAES GMAC using aes_*_generic",
                        "role": "CO"
                    },
                    {
                        "name-[U]": "Message Authentication Generation",
                        "description": "MAC computation",
                        "algorithmsAccessed": "AES GMAC using aes_*_generic\nHMAC-MD4, HMAC-MD5, HMAC-SHA1, HMAC-SHA-3, HMAC-RIPEMD-160",
                        "role": "CO"
                    },
                    {
                        "name-[U]": "Message Digest",
                        "description": "Generating message digest",
                        "algorithmsAccessed": "MD4\nMD5 (outside of TLS)\nSHAKE, RIPEMD-160, SHA-3",
                        "role": "CO"
                    },
                    {
                        "name-[U]": "Signature Generation",
                        "description": "Generating signatures",
                        "algorithmsAccessed": "RSA using keys less than 2048 bits\nRSA without hashing\nSHA-1, SHA-3",
                        "role": "CO"
                    },
                    {
                        "name-[U]": "Signature Verification",
                        "description": "Verifying signatures",
                        "algorithmsAccessed": "RSA using keys less than 1024 bits\nRSA without hashing",
                        "role": "CO"
                    },
                    {
                        "name-[U]": "Key Generation",
                        "description": "Generating key pair",
                        "algorithmsAccessed": "RSA using RSA_generate_key_ex\nECDSA using EC_KEY_generate_key",
                        "role": "CO"
                    },
                    {
                        "name-[U]": "Shared Secret Computation",
                        "description": "Calculating shared secret",
                        "algorithmsAccessed": "Curve secp256k1\nDiffie Hellman",
                        "role": "CO"
                    },
                    {
                        "name-[U]": "Key Derivation",
                        "description": "Deriving TLS keys",
                        "algorithmsAccessed": "TLS KDF using any SHA algorithms other than SHA2-256, SHA2-384, SHA2-512; or TLS KDF using non-extended master secret",
                        "role": "CO"
                    },
                    {
                        "name-[U]": "Key Encapsulation",
                        "description": "Encrypting a key",
                        "algorithmsAccessed": "RSA",
                        "role": "CO"
                    },
                    {
                        "name-[U]": "Key Un-encapsulation",
                        "description": "Decrypting a key",
                        "algorithmsAccessed": "RSA",
                        "role": "CO"
                    }
                ],
                "nonApprovedServices-text": "The Non-Approved Services table lists the non-approved services that uses non-approved security functions."
            },
            "4.5-External-Software-Firmware-Loaded": {
                "externalSwFwLoaded-text": "The module does not load external software or firmware."
            },
            "4.6-Bypass-Actions-And-Status-[O]": {
                "bypass-text": "The module does not implement a bypass capability."
            },
            "4.7-Cryptographic-Output-Actions-And-Status-[O]": {
                "cryptoOutput-text": "The module does not implement a self-initiated cryptographic output capability."
            },
            "4.8-Additional-Information-[O]": {
                "additionalInfo-text": "In addition, the module implements a service indicator that indicates whether the invoked service is approved. The service indicator is a return value 1 from the FIPS_service_indicator_check_approved function. This function is used together with two other functions."
            }
        },
        "Section-5-Software-Firmware-Security": {
            "5.1-Integrity-Techniques": {
                "integrityTechniques-text": "The integrity of the module is verified by comparing a HMAC value calculated at run time on the bcm.o file, with the HMAC-SHA2-256 value stored in the module file fips_shared_support.c that was computed at build time."
            },
            "5.2-Initiate-On-Demand": {
                "onDemand-text": "The module provides on-demand integrity test. The integrity test is performed by the On-Demand Integrity Test service, which calls the BORINGSSL_integrity_test function. The integrity test is also performed as part of the Pre-Operational Self-Tests."
            },
            "5.3-Open-Source-Parameters-[O]": {
                "openSourceParameters-text": "There are no open source parameters applicable to the module."
            },
            "5.4-Additional-Information-[O]": {
                "additionalInfo-text": "The module consists of executable code in the form of bcm.o file. The compilers and control parameters required to compile the code into an executable format are specified in Section 11.1."
            }
        },
        "Section-6-Operational-Environment": {
            "6.1-Operational-Environment-Type-And-Requirements": {
                "ReferenceToOEType": {
                    "$ref": "ModuleSpecification.json#\/path\/to\/OpEnvType"
                },
                "howRequirementsSatisfied": {
                    "howRequirementsSatisfied-text": ""
                }
            },
            "6.2-Configuration-Settings-And-Restrictions-[O]": {
                "configSettings-text": "The module should be compiled and installed as stated in Section 11. The user should confirm that the module is installed correctly by the following steps 4 and 5 listed in section 11.1."
            },
            "6.3-Additional-Information-[O]": {
                "additionalInfo-text": "The vendor claims the platforms listed in the Vendor Affirmed Operational Environments - Software/Firmware/Hybrid Table to be vendor affirmed and that the module functions the same way and provides the same services on those platforms."
            }
        },
        "Section-7-Physical-Security": {
            "7.1-Mechanisms-And-Actions-Required-[O]": {
                "phSecMechanismList-[O]": [
                    {
                        "physicalSecurityMechanism": "",
                        "recommendedFrequency": "",
                        "inspectionOrTestGuidanceDetails": ""
                    }
                ],
                "mechanismsAndActions-text": "",
                "mechanismsAndActions-photo": {
                    "$ref": "ImageName.png"
                }
            },
            "7.2-User-Placed-Tamper-Seals-[O]": {
                "number": "",
                "placement": "",
                "surfacePreparation": "",
                "operatorResponsibleForSecuringUnusedSeals": "",
                "partNumbers": {
                    "partNumbers-text": "",
                    "partNumbers-photo": {
                        "$ref": "ImageName.png"
                    }
                }
            },
            "7.3-Filler-Panels-[O]": {
                "fillerPanels-text": "",
                "fillerPanels-photo": {
                    "$ref": "ImageName.png"
                }
            },
            "7.4-Fault-Induction-Mitigation-[O]": {
                "faultInduction-text": ""
            },
            "7.5-EFP-EFT-Information-[O]": {
                "efpEftInfoList-[O]": [
                    {
                        "lowTempMeasurement": "",
                        "lowTempEFPOrEFT": "",
                        "lowTempResults": "",
                        "highTempMeasurement": "",
                        "highTempEFPorEFT": "",
                        "highTempResults": "",
                        "lowVoltMeasurement": "",
                        "lowVoltEFPorEFT": "",
                        "lowVoltResults": "",
                        "highVoltMeasurement": "",
                        "highVoltEFPorEFT": "",
                        "highVoltResults": "" 
                    }
                ],
                "EFPorEFT-text": ""
            },
            "7.6-Hardness-Testing-Temperature-Ranges-[O]": {
                "hardnessTestTempList-[O]": [
                    {
                        "lowHardnessTemperatureMeasurement": "",
                        "highHardnessTemperatureMeasurement": ""
                    }
                ],
                "hardnessTesting-text": ""
            },
            "7.7-Additional-Information-[O]": {
                "additionalInfo-text": ""
            }
        },
        "Section-8-Non-Invasive-Security": {
            "8.1-Mitigation-Techniques-[O]": {
                "mitigationTechniques-text": ""
            },
            "8.2-Effectiveness-[O]": {
                "effectiveness-text": ""
            },
            "8.3-Additional-Information-[O]": {
                "additionalInfo-text": ""
            }
        },
        "Section-9-Sensitive-Security-Parameters-Management": {
            "9.1-Storage-Areas": {
                "storageAreaList": [
                    {
                        "name-[U]": "RAM",
                        "description": "Temporary storage for SSPs used by the module as part of service",
                        "persistenceType": "Dynamic"
                    }
                ],
                "storageAreas-text": "SSPs are provided to the module by the calling process and are destroyed when released by the appropriate zeroization function calls. The module does not perform persistent storage of SSPs."
            },
            "9.2-SSP-Input-Output-Methods": {
                "sspInputOutputList": [
                    {
                        "name-[U]": "API input parameters",
                        "from": "Operator calling application (TOEPP)",
                        "to": "Cryptographic Module",
                        "formatType": "Plaintext",
                        "distributionType": "Manual",
                        "entryType": "Electronic",
                        "SFIorAlgorithm-[O]": "None"
                    },
                    {
                        "name-[U]": "API output parameters",
                        "from": "Cryptographic Module",
                        "to": "Operator calling application (TOEPP)",
                        "formatType": "Plaintext",
                        "distributionType": "Manual",
                        "entryType": "Electronic",
                        "SFIorAlgorithm-[O]": "None"
                    }
                ],
                "inputOutputMethods-text": "The module does not support manual SSP entry or intermediate key generation output. The module does not support entry and output of SSPs beyond the physical perimeter of the operational environment. The SSPs are provided to the module via API input parameters in the plaintext form and output via API output parameters in the plaintext form to and from the calling application running on the same operational environment. The output of plaintext CSPs requires two independent internal actions. Specially, the first action is creation of the cipher context to request the service and to hold the CSPs to be output from the module. The second action is to process the ‘Key Generation’ service request using the context created. Only after successful completion of this request, the generated CSP is output via the API output parameter."
            },
            "9.3-SSP-Zeroization-Methods": {
                "sspZeroizationList": [
                    {
                        "method-[u]": "OPENSSL_cleanse",
                        "description": "Zeroizes the SSP",
                        "rationale": "Fills the pointer of size len with a string of 0's",
                        "operatorInitiationCapability": "Through calling application reponsible for calling the OPENSSL_cleanse function"
                    },
                    {
                        "method-[U]": "EVP_AEAD_CTX_zero",
                        "description": "Calls OPENSSL_memset() with the passed in context",
                        "rationale": "Zeroizes the associated context",
                        "operatorInitiationCapability": "Through the respective calling application reponsible for calling the EVP_AEAD_CTX_zero function"
                    },
                    {
                        "method-[U]": "HMAC_CTX_cleanup",
                        "description": "Erases the key and other data from the HMAC_CTX and releases any associated resources",
                        "rationale": "Enacts ",
                        "operatorInitiationCapability": "Through the respective calling application reponsible for calling the HMAC_CTX_cleanup function"
                    },
                    {
                        "method-[U]": "CTR_DRBG_clear",
                        "description": "Zeroizes the CTR_DRBG_STATE structure",
                        "rationale": "Calls OPENSSL_cleanse on the CTR_DRBG_STATE structure",
                        "operatorInitiationCapability": "Through vcalling application reponsible for calling the CTR_DRBG_clear function"
                    },
                    {
                        "method-[U]": "RSA_free",
                        "description": "Frees the RSA structure with its assocated components",
                        "rationale": "Calls mutiple freeing methods for RSA related keys and values",
                        "operatorInitiationCapability": "Through the respective calling application reponsible for calling the RSA_free function"
                    },
                    {
                        "method-[U]": "EC_GROUP_free",
                        "description": "Frees the memory associated with the structures EC_GROUP",
                        "rationale": "Release a reference to a group type",
                        "operatorInitiationCapability": "Through the respective calling application reponsible for calling the EC_GROUP_free function"
                    },
                    {
                        "method-[U]": "EC_POINT_free",
                        "description": "Frees the memory associated with the EC_POINT",
                        "rationale": "Release a referece to a point type",
                        "operatorInitiationCapability": "Through the respective calling application reponsible for calling the EC_POINT_free function"
                    },
                    {
                        "method-[U]": "EC_KEY_free",
                        "description": "Decrements the reference count for the EC_KEY object",
                        "rationale": "If the reference count drops to zero, then EC_KEY_FREE frees the memory associated with it",
                        "operatorInitiationCapability": "Through the respective calling application reponsible for calling the EC_KEY_free function"
                    }
                ],
                "zeroization-text": "The zeroization is performed by the module overwriting zeroes or predefined values to the memory location occupied by the SSP and further deallocating that area. The calling application, interacting with the module, is responsible for calling the appropriate destruction functions using the zeroization APIs listed in the Zeroization table. The completion of a zeroization routine will indicate that a zeroization procedure succeeded."
            },
            "9.4-SSPs": {
                "sspList-1": [
                    {
                        "name-[U]": "AES",
                        "description": "AES key used for encryption, decryption, and computing MAC tags",
                        "size": "128 to 256 bits",
                        "strength": "128 to 256 bits",
                        "type": "Symmetric Key",
                        "generatedBy": "N/A",
                        "establishedBy": ""
                    },
                    {
                        "name-[U]": "HMAC key",
                        "description": "HMAC key",
                        "size": "112 bits or greater",
                        "strength": "112 bits or greater",
                        "type": "Authentication key",
                        "generatedBy": "N/A",
                        "establishedBy": ""
                    },
                    {
                        "name-[U]": "DRBG Entropy Input",
                        "description": "Entropy input used in order to seed the DRBGs",
                        "size": "256 bits",
                        "strength": "256 bits",
                        "type": "Entropy source",
                        "generatedBy": "N/A",
                        "establishedBy": "N/A"
                    },
                    {
                        "name-[U]": "DRBG Seed, V, Key",
                        "description": "Seeding used for DRBG entropy input",
                        "size": "256 bits",
                        "strength": "256 bits",
                        "type": "Random Number Generation",
                        "generatedBy": "Per SP800-90Arev1 DRBG",
                        "establishedBy": "N/A"
                    },
                    {
                        "name-[U]": "RSA key pair",
                        "description": "Key pair used for RSA key generation and signature generation/verification",
                        "size": "112 to 150 bits",
                        "strength": "112 to 150 bits",
                        "type": "Key pair generation",
                        "generatedBy": "Per FIPS 186-4; random values generated using DRBG",
                        "establishedBy": "Shared Secret Computation"
                    },
                    {
                        "name-[U]": "ECDSA key pair",
                        "description": "Key pair used for ECDSA key generation and signature generation/verification",
                        "size": "112 to 256 bits",
                        "strength": "112 to 256 bits",
                        "type": "Key pair generation",
                        "generatedBy": "Per FIPS 186-4; random values generated using DRBG",
                        "establishedBy": "MD/EE"
                    },
                    {
                        "name-[U]": "ECDH key pair",
                        "description": "EC Diffie-Hellman public and private key",
                        "size": "112 to 256 bits",
                        "strength": "112 to 256 bits",
                        "type": "Key pair generation",
                        "generatedBy": "Per FIPS 186-4; random values generated using DRBG",
                        "establishedBy": "MD/EE"
                    },
                    {
                        "name-[U]": "Shared Secret",
                        "description": "Compute a shared secret",
                        "size": "112 to 256 bits",
                        "strength": "112 to 256 bits",
                        "type": "Shared secret computation",
                        "generatedBy": "Per SP800-56ARev3",
                        "establishedBy": "MD/EE"
                    },
                    {
                        "name-[U]": "TLS pre-master secret",
                        "description": "TLS pre-master secret used ",
                        "size": "112 to 256 bits",
                        "strength": "112 to 256 bits",
                        "type": "Used for key derivation",
                        "generatedBy": "N/A",
                        "establishedBy": "MD/EE"
                    },
                    {
                        "name-[U]": "TLS master secret",
                        "description": "TLS master secret used to derive keys",
                        "size": "384 bits",
                        "strength": "384 bits",
                        "type": "Key Derivation",
                        "generatedBy": "Generated using SP800-135rev1 TLS KDF",
                        "establishedBy": "N/A"
                    },
                    {
                        "name-[U]": "TLS Derived key (AES)",
                        "description": "Derive keys using TLS (AES)",
                        "size": "128 to 256 bits",
                        "strength": "128 to 256 bits",
                        "type": "Key Derivation",
                        "generatedBy": "Generated using SP800-135rev1 TLS KDF",
                        "establishedBy": "MD/EE"
                    },
                    {
                        "name-[U]": "TLS Derived key (HMAC)",
                        "description": "Derive keys using TLS (HMAC)",
                        "size": "112 bits or greater",
                        "strength": "112 bits or greater",
                        "type": "Key Derivation",
                        "generatedBy": "Generated using SP800-135rev1 TLS KDF",
                        "establishedBy": "MD/EE"
                    }
                ],
                "sspList-2": [
                    {
                        "usedBy": "Encryption, Decryption, Authenticated Encryption, Authenticated Decryption, Key wrapping, Key unwrapping, Message Authentication Generation",
                        "inputOutput": "CM from TOEPP Path. Passed into the module via API input parameter in plaintext (P) format.",
                        "storage-[M]": "RAM",
                        "temporaryStorageDuration-[O]": "",
                        "zeroization": "OPENSSL_cleanse, EVP_AEAD_CTX_zero",
                        "category": "Symmetric Key",
                        "relatedSSPs-[O]": "N/A"
                    },
                    {
                        "usedBy": "Message Authentication Generation",
                        "inputOutput": "CM from TOEPP Path. Passed into the module via API input parameter in plaintext (P) format.",
                        "storage-[M]": "RAM",
                        "temporaryStorageDuration-[O]": "",
                        "zeroization": "HMAC_CTX_cleanup",
                        "category": "Authentication Key",
                        "relatedSSPs-[O]": "N/A"
                    },
                    {
                        "usedBy": "Random Number Generation",
                        "inputOutput": "Obtained from the ENT (NP)",
                        "storage-[M]": "RAM",
                        "temporaryStorageDuration-[O]": "",
                        "zeroization": "CTR_DRBG_clear",
                        "category": "Entropy source",
                        "relatedSSPs-[O]": "DRBG Seed, V, Key"
                    },
                    {
                        "usedBy": "Random Number Generation",
                        "inputOutput": "N/A",
                        "storage-[M]": "RAM",
                        "temporaryStorageDuration-[O]": "",
                        "zeroization": "CTR_DRBG_clear",
                        "category": "",
                        "relatedSSPs-[O]": "N/A"
                    },
                    {
                        "usedBy": "Key Generation, Signature Generation, Signature Verification",
                        "inputOutput": "CM from TOEPP Path. Passed into the module via API input parameter in plaintext (P) format.",
                        "storage-[M]": "RAM",
                        "temporaryStorageDuration-[O]": "",
                        "zeroization": "RSA_free",
                        "category": "Key pair generation",
                        "relatedSSPs-[O]": "N/A"
                    },
                    {
                        "usedBy": "Key Generation, Key Verification, Signature Generation, Signature Verification",
                        "inputOutput": "CM from TOEPP Path. Passed into the module via API input parameter in plaintext (P) format.",
                        "storage-[M]": "RAM",
                        "temporaryStorageDuration-[O]": "",
                        "zeroization": "EC_GROUP_free, EC_POINT_free, EC_KEY_free",
                        "category": "Key pair generation",
                        "relatedSSPs-[O]": "N/A"
                    },
                    {
                        "usedBy": "Shared Secret Computation",
                        "inputOutput": "CM from TOEPP Path. Passed into the module via API input parameter in plaintext (P) format.",
                        "storage-[M]": "RAM",
                        "temporaryStorageDuration-[O]": "",
                        "zeroization": "EC_GROUP_free, EC_POINT_free, EC_KEY_free",
                        "category": "Key pair generation",
                        "relatedSSPs-[O]": "Shared Secret"
                    },
                    {
                        "usedBy": "Shared Secret Computation",
                        "inputOutput": "CM from TOEPP Path. Passed into the module via API input parameter in plaintext (P) format.",
                        "storage-[M]": "RAM",
                        "temporaryStorageDuration-[O]": "",
                        "zeroization": "OPENSSL_cleanse",
                        "category": "Key pair generation",
                        "relatedSSPs-[O]": "N/A"
                    },
                    {
                        "usedBy": "Key Derivation",
                        "inputOutput": "CM from TOEPP Path. Passed into the module via API input parameter in plaintext (P) format.",
                        "storage-[M]": "RAM",
                        "temporaryStorageDuration-[O]": "",
                        "zeroization": "OPENSSL_cleanse",
                        "category": "Key Derivation",
                        "relatedSSPs-[O]": "N/A"
                    },
                    {
                        "usedBy": "Key Derivation",
                        "inputOutput": "CM from TOEPP Path. Passed into the module via API input parameter in plaintext (P) format.",
                        "storage-[M]": "RAM",
                        "temporaryStorageDuration-[O]": "",
                        "zeroization": "OPENSSL_cleanse",
                        "category": "Key Derivation",
                        "relatedSSPs-[O]": "N/A"
                    },
                    {
                        "usedBy": "Key Derivation",
                        "inputOutput": "CM from TOEPP Path. Passed out the module via API input parameter in plaintext (P) format.",
                        "storage-[M]": "RAM",
                        "temporaryStorageDuration-[O]": "",
                        "zeroization": "OPENSSL_cleanse",
                        "category": "Key Derivation",
                        "relatedSSPs-[O]": "TLS master secret"
                    },
                    {
                        "usedBy": "Key Derivation",
                        "inputOutput": "CM from TOEPP Path. Passed out of the module via API input parameter in plaintext (P) format.",
                        "storage-[M]": "RAM",
                        "temporaryStorageDuration-[O]": "",
                        "zeroization": "OPENSSL_cleanse",
                        "category": "Key Derivation",
                        "relatedSSPs-[O]": "TLS master secret"
                    }
                ],
                "ssp-text": ""
            },
            "9.5-Transitions-[O]": {
                "transitions-text": "There are no applicable transition periods or time frames related to approved status of algorithms or SSP lengths for this module."
            },
            "9.6-Additional-Information-[O]": {
                "additionalInfo-text": "There are no additional information pertaining to this section."
            }
        },
        "Section-10-Self-Tests": {
            "10.1-Pre-Operational-Self-Tests": {
                "preOpSelfTestList": [
                    {
                        "algorithm": "HMAC-SHA2-256 (A4509)",
                        "testProperties": "SHA2-256",
                        "testMethod": "Message Authentication",
                        "type": "SW/FW Integrity",
                        "indicator": "Module becomes operational",
                        "details": "Integrity test for bcm.o"
                    }
                ],
                "POST-text": "The module transitions to the operational state only after the pre-operational self-test is passed successfully. The pre-operational self-test is executed automatically after the automatic execution of the cryptographic algorithm self-tests. The types of pre-operational self-tests are described in the next sub-section. The integrity of the software component of the module is verified according to Section 5, using HMAC-SHA2-256. If the comparison verification fails, the module transitions to the error state (Section 10.4). The CAST for the integrity algorithm is performed before the integrity test itself."
            },
            "10.2-Conditional-Self-Tests": {
                "condSelfTestList": [
                    {
                        "algorithm": "AES-CBC (A4513)",
                        "testProperties": "128-bit AES key",
                        "testMethod": "Encrypt KAT for CBC",
                        "type": "Conditional Algorithm Self-Test",
                        "indicator": "Module is operational",
                        "details": "Encrypt",
                        "condition": "Power Up"
                    },
                    {
                        "algorithm": "AES-CBC (A4510)",
                        "testProperties": "128-bit AES key",
                        "testMethod": "Decrypt KAT for CBC",
                        "type": "Conditional Algorithm Self-Test",
                        "indicator": "Module is operational",
                        "details": "Decrypt",
                        "condition": "Power Up"
                    },
                    {
                        "algorithm": "AES-GCM (A4511)",
                        "testProperties": "128-bit AES key",
                        "testMethod": "Encrypt KAT for GCM",
                        "type": "Conditional Algorithm Self-Test",
                        "indicator": "Module is operational",
                        "details": "Encrypt",
                        "condition": "Power Up"
                    },
                    {
                        "algorithm": "AES-GCM (A4511)",
                        "testProperties": "128-bit AES key",
                        "testMethod": "Decrypt KAT for GCM",
                        "type": "Conditional Algorithm Self-Test",
                        "indicator": "Module is operational",
                        "details": "Decrypt",
                        "condition": "Power Up"
                    },
                    {
                        "algorithm": "SHA-1 (A4509)",
                        "testProperties": "N/A",
                        "testMethod": "SHA-1 KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "indicator": "Module is operational",
                        "details": "Message digest",
                        "condition": "Power Up"
                    },
                    {
                        "algorithm": "SHA2-256 (A4509)",
                        "testProperties": "N/A",
                        "testMethod": "SHA2-256 KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "indicator": "Module is operational",
                        "details": "Message digest",
                        "condition": "Power Up"
                    },
                    {
                        "algorithm": "SHA2-512 (A4509)",
                        "testProperties": "N/A",
                        "testMethod": "SHA2-512 KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "indicator": "Module is operational",
                        "details": "Message digest",
                        "condition": "Power Up"
                    },
                    {
                        "algorithm": "HMAC-SHA2-256 (A4509)",
                        "testProperties": "SHA2-256",
                        "testMethod": "HMAC KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "indicator": "Module is operational",
                        "details": "Message digest",
                        "condition": "Power Up"
                    },
                    {
                        "algorithm": "Counter DRBG (A4513)",
                        "testProperties": "AES 256",
                        "testMethod": "CTR_DRBG KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "indicator": "Module is operational",
                        "details": "Seed Generation",
                        "condition": "Power Up"
                    },
                    {
                        "algorithm": "Counter DRBG (A4513)",
                        "testProperties": "N/A",
                        "testMethod": "SP800-90Ar1 Section 11.3 Health Test",
                        "type": "Conditional Algorithm Self-Test",
                        "indicator": "Module is operational",
                        "details": "Seed Generation",
                        "condition": "Power Up"
                    },
                    {
                        "algorithm": "ECDSA SigGen (FIPS186-5) (A4509)",
                        "testProperties": "P-256 Curve and SHA2-256",
                        "testMethod": "KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "indicator": "Module is operational",
                        "details": "Sign",
                        "condition": "Signature Generation or Key Generation service request"
                    },
                    {
                        "algorithm": "ECDSA SigVer (FIPS186-4) (A4509)",
                        "testProperties": "P-256 Curve and SHA2-256",
                        "testMethod": "KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "indicator": "Module is operational",
                        "details": "Verify",
                        "condition": "Signature verification or Key Generation service request"
                    },
                    {
                        "algorithm": "ECDSA KeyGen (FIPS186-5) (A4509)",
                        "testProperties": "Respective Curve and SHA2-256",
                        "testMethod": "Signature generation and verification",
                        "type": "PCT",
                        "indicator": "Module is operational",
                        "details": "Sign and Verify",
                        "condition": "Key generation"
                    },
                    {
                        "algorithm": "KAS-ECC-SSC Sp800-56Ar3 (A4509)",
                        "testProperties": "P-256 Curve",
                        "testMethod": "Z Computation",
                        "type": "Conditional Algorithm Self-Test",
                        "indicator": "Module is operational",
                        "details": "Shared secret computation",
                        "condition": "Shared secret computation request"
                    },
                    {
                        "algorithm": "KDF TLS (A4509)",
                        "testProperties": "SHA2-256",
                        "testMethod": "TLS 1.2 KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "indicator": "Module is operational",
                        "details": "Key derivation",
                        "condition": "Power Up"
                    },
                    {
                        "algorithm": "KDA HKDF Sp800-56Cr1 (A4509)",
                        "testProperties": "HMAC-SHA2-256",
                        "testMethod": "KDA HKDF KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "indicator": "Module is operational",
                        "details": "Key derivation",
                        "condition": "Power Up"
                    },
                    {
                        "algorithm": "PBKDF (A4509)",
                        "testProperties": "HMAC-SHA2-256",
                        "testMethod": "PBKDF2 KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "indicator": "Module is operational",
                        "details": "Key derivation",
                        "condition": "Power Up"
                    },
                    {
                        "algorithm": "RSA SigGen (FIPS186-5) (A4509)",
                        "testProperties": "PKCS#1 v1.5 with 2048 bit key and SHA2-256",
                        "testMethod": "Sign KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "indicator": "Module is operational",
                        "details": "Sign",
                        "condition": "Signature Generation or Key Generation service request"
                    },
                    {
                        "algorithm": "RSA SigVer (FIPS186-4) (A4509)",
                        "testProperties": "PKCS#1 v1.5 with 2048 bit key and SHA2-256",
                        "testMethod": "Verify KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "indicator": "Module is operational",
                        "details": "Sign",
                        "condition": "Signature Verification or Key Generation service request"
                    },
                    {
                        "algorithm": "RSA",
                        "testProperties": "SHA2-256 and respective keys",
                        "testMethod": "Signature generation and verification",
                        "type": "PCT",
                        "indicator": "Module is operational",
                        "details": "Sign and Verify",
                        "condition": "Key generation"
                    }
                ],
                "CAST-text": ""
            },
            "10.3-Periodic-Self-Tests-Information": {
                "preOpPeriodicSelfTestList": [
                    {
                        "algorithm": "HMAC-SHA2-256 (A4509)",
                        "testMethod": "Message Authentication",
                        "type": "SW/FW Integrity",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    }
                ],
                "condPeriodicSelfTestList": [
                    {
                        "algorithm": "AES-CBC (A4513)",
                        "testMethod": "Encrypt KAT for CBC",
                        "type": "Conditional Algorithm Self-Test",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    },
                    {
                        "algorithm": "AES-CBC (A4510)",
                        "testMethod": "Decrypt KAT for CBC",
                        "type": "Conditional Algorithm Self-Test",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    },
                    {
                        "algorithm": "AES-GCM (A4511)",
                        "testMethod": "Encrypt KAT for GCM",
                        "type": "Conditional Algorithm Self-Test",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    },
                    {
                        "algorithm": "AES-GCM (A4511)",
                        "testMethod": "Decrypt KAT for GCM",
                        "type": "Conditional Algorithm Self-Test",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    },
                    {
                        "algorithm": "SHA-1 (A4509)",
                        "testMethod": "SHA-1 KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    },
                    {
                        "algorithm": "SHA2-256 (A4509)",
                        "testMethod": "SHA2-256 KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    },
                    {
                        "algorithm": "SHA2-512 (A4509)",
                        "testMethod": "SHA2-512 KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    },
                    {
                        "algorithm": "HMAC-SHA2-256 (A4509)",
                        "testMethod": "HMAC KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    },
                    {
                        "algorithm": "Counter DRBG (A4513)",
                        "testMethod": "CTR_DRBG KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    },
                    {
                        "algorithm": "Counter DRBG (A4513)",
                        "testMethod": "SP800-90Ar1 Section 11.3 Health Test",
                        "type": "Conditional Algorithm Self-Test",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    },
                    {
                        "algorithm": "ECDSA SigGen (FIPS186-5) (A4509)",
                        "testMethod": "KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    },
                    {
                        "algorithm": "ECDSA SigVer (FIPS186-4) (A4509)",
                        "testMethod": "KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    },
                    {
                        "algorithm": "ECDSA KeyGen (FIPS186-5) (A4509)",
                        "testMethod": "Signature generation and verification",
                        "type": "PCT",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    },
                    {
                        "algorithm": "KAS-ECC-SSC Sp800-56Ar3 (A4509)",
                        "testMethod": "Z Computation",
                        "type": "Conditional Algorithm Self-Test",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    },
                    {
                        "algorithm": "KDF TLS (A4509)",
                        "testMethod": "TLS 1.2 KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    },
                    {
                        "algorithm": "KDA HKDF Sp800-56Cr1 (A4509)",
                        "testMethod": "KDA HKDF KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    },
                    {
                        "algorithm": "PBKDF (A4509)",
                        "testMethod": "PBKDF2 KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    },
                    {
                        "algorithm": "RSA SigGen (FIPS186-5) (A4509)",
                        "testMethod": "Sign KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    },
                    {
                        "algorithm": "RSA SigVer (FIPS186-4) (A4509)",
                        "testMethod": "Verify KAT",
                        "type": "Conditional Algorithm Self-Test",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    },
                    {
                        "algorithm": "RSA",
                        "testMethod": "Signature generation and verification",
                        "type": "PCT",
                        "period": "On demand",
                        "periodicMethod": "Manually"
                    }
                ],
                "periodicSelfTests-text": ""
            },
            "10.4-Error-States": {
                "errorStateList": [
                    {
                        "stateName-[U]": "Error",
                        "description": "The library is aborted with SIGABRT signal. Module is no longer operational the data output interface is inhibited",
                        "conditions": "Pre-operational test failure",
                        "recoveryMethod": "Module reset",
                        "indicator": "Error message is output on the stderr and then the module is aborted."
                    },
                    {
                        "stateName-[U]": "PCT Error",
                        "description": "The library is aborted with SIGABRT signal. Module is no longer operational the data output interface is inhibited",
                        "conditions": "Conditional test failure",
                        "recoveryMethod": "Module reset",
                        "indicator": "For CAST failure, an error message is output on the stderr and then the module is aborted. For PCT failure, an error message is output in the error queue and then the module generates new key, If the PCT still does not pass, eventually the module will be aborted after 5 tries."
                    }
                ],
                "errorStates-text": "If the module fails any of the self-tests, the module enters the error state. In the error state, the module outputs the error through the status output interface and the abort function is called that raises the SIGABRT signal, causing the program termination such that module is no longer operational. In the error state, as the module is no longer operational the data output interface is inhibited. To recover from the Error state, the module needs to be rebooted."
            },
            "10.5-Operator-Initiation-of-Self-Tests-[O]": {
                "operatorInitiation-text": "All self-tests can be invoked on demand by unloading and subsequently re-initializing the module."
            },
            "10.6-Additional-Information-[O]": {
                "additionalInfo-text": "There are no additional information pertaining to this section."
            }
        },
        "Section-11-Life-Cycle-Assurance": {
            "11.1-Installation-Initialization-And-Startup-Procedures": {
                "startupProcedures-text": "The module offers three AES GCM implementations. The GCM IV generation for these implementations complies respectively with IG C.H under Scenario 1, Scenario 2, and Scenario 5. The GCM shall only be used in the context of the AES-GCM encryption executing under each scenario, and using the referenced APIs explained next. For TLS 1.2, the module offers the GCM implementation via the functions EVP_aead_aes_128_gcm_tls12() and EVP_aead_aes_256_gcm_tls12(), and uses the context of Scenario 1 of IG C.H. The module is compliant with SP800-52rev2 and the mechanism for IV generation is compliant with RFC5288. The module supports acceptable AES-GCM ciphersuites from Section 3.3.1 of SP800-52rev2. The module explicitly ensures that the counter (the nonce_explicit part of the IV) does not exhaust the maximum number of possible values of 264-1 for a given session key. If this exhaustion condition is observed, the module returns an error indication to the calling application, which will then need to either abort the connection, or trigger a handshake to establish a new encryption key. In the event the module’s power is lost and restored, the consuming application must ensure that a new key for use with the AES-GCM key encryption or decryption under this scenario shall be established. In this implementation, the module offers the interfaces EVP_aead_aes_128_gcm_randnonce() and EVP_aead_aes_256_gcm_randnonce() for compliance with Scenario 2 of IG C.H and SP800-38D Section 8.2.2. The AES-GCM IV is generated randomly internal to the module using module’s approved DRGB. The DRBG seeds itself from the entropy source. The GCM IV is 96 bits in length. Per Section 9, this 96-bit IV contains 96 bits of entropy. For TLS 1.3, the module offers the AES-GCM implementation via the functions EVP_aead_aes_128_gcm_tls13() and EVP_aead_aes_256_gcm_tls13(), and uses the context of Scenario 5 of IG C.H. The protocol that provides this compliance is TLS 1.3, defined in RFC8446 of August 2018, using the ciphersuites that explicitly select AES-GCM as the encryption/decryption cipher (Appendix B.4 of RFC8446). The module supports acceptable AES-GCM ciphersuites from Section 3.3.1 of SP800-52rev2. The module implements, within its boundary, an IV generation unit for TLS 1.3 that keeps control of the 64-bit counter value within the AES-GCM IV. If the exhaustion condition is observed, the module will return an error indication to the calling application, who will then need to either trigger a re-key of the session (i.e., a new key for AES-GCM), or terminate the connection. In the event the module’s power is lost and restored, the consuming application must ensure that new AES-GCM keys encryption or decryption under this scenario are established. TLS 1.3 provides session resumption, but the resumption procedure derives new AES-GCM encryption keys."
            },
            "11.2-Administrator-Guidance": {
                "adminGuidance-text": "For TLS 1.3, the module offers the AES-GCM implementation via the functions EVP_aead_aes_128_gcm_tls13() and EVP_aead_aes_256_gcm_tls13(), and uses the context of Scenario 5 of IG C.H. The protocol that provides this compliance is TLS 1.3, defined in RFC8446 of August 2018, using the ciphersuites that explicitly select AES-GCM as the encryption/decryption cipher (Appendix B.4 of RFC8446). The module supports acceptable AES-GCM ciphersuites from Section 3.3.1 of SP800-52rev2. The module implements, within its boundary, an IV generation unit for TLS 1.3 that keeps control of the 64-bit counter value within the AES-GCM IV. If the exhaustion condition is observed, the module will return an error indication to the calling application, who will then need to either trigger a re-key of the session (i.e., a new key for AES-GCM), or terminate the connection. In the event the module’s power is lost and restored, the consuming application must ensure that new AES-GCM keys encryption or decryption under this scenario are established. TLS 1.3 provides session resumption, but the resumption procedure derives new AES-GCM encryption keys."
            },
            "11.3-Non-Administrator-Guidance": {
                "nonadminGuidance-text": "There is no non-administrator guidance within the module."
            },
            "11.4-Design-And-Rules-[O]": {
                "designAndRules-text": "The module initializes upon power-on. After the pre-operational self-tests are successfully concluded, the module automatically transitions to the operational state. In this state, the module awaits services requests from the operator."
            },
            "11.5-Maintenance-Requirements-[O]": {
                "maintenanceReqs-text": "There are no maintenence requirements for the module."
            },
            "11.6-End-Of-Life-[O]": {
                "endOfLife-text": "When the module is at end of life, for the GitHub repo, the README will be modified to mark the library as deprecated. After a 6-month window, more restrictive branch permissions will be added such that only administrators can read from the FIPS branch."
            },
            "11.7-Additional-Information-[O]": {
                "additionalInfo-text": "There is no additional information pertaining to this section."
            }
        },
        "Section-12-Mitigation-Of-Other-Attacks": {
            "12.1-Attack-List-[O]": {
                "attackList-text": "RSA is vulnerable to timing attacks."
            },
            "12.2-Mitigation-Effectiveness-[O]": {
                "mitigationEffectiveness-text": "The module provides the mechanism to use the blinding for RSA. When the blinding is on, the module generates a random value to form a blinding factor in the RSA key before the RSA key is used in the RSA cryptographic operations."
            },
            "12.3-Guidance-And-Constraints-[O]": {
                "guidanceAndConstraints-text": "In a setup where attackers can measure the time of RSA decryption or signature operations, blinding must be used to protect the RSA operation from that attack."
            },
            "12.4-Additional-Information-[O]": {
                "additionalInfo-text": "There is no additional information pertaining to this section."
            }
        }
    }
}